{"remainingRequest":"C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\src\\components\\BitcoinHistory.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\src\\components\\BitcoinHistory.vue","mtime":1604067628965},{"path":"C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\martins.d.bernhards\\Desktop\\BitcoinPriceProject\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IFZ1ZSBmcm9tICJ2dWUiOwppbXBvcnQgVHJlbmRDaGFydCBmcm9tICJ2dWUtdHJlbmQtY2hhcnQiOwpWdWUudXNlKFRyZW5kQ2hhcnQpOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CmV4cG9ydCBkZWZhdWx0IHsKICBlbDogIiNhcHAiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc1Nob3duOiA0LAogICAgICBkYXRhc2V0OiBbXSwKICAgICAgbGFiZWxzOiB7CiAgICAgICAgeExhYmVsczogW10sCiAgICAgICAgeUxhYmVsczogNSwKICAgICAgICB5TGFiZWxzVGV4dEZvcm1hdHRlcjogZnVuY3Rpb24geUxhYmVsc1RleHRGb3JtYXR0ZXIodmFsKSB7CiAgICAgICAgICByZXR1cm4gIiQiICsgTWF0aC5yb3VuZCh2YWwgKiAxMDApIC8gMTAwOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ3JpZDogewogICAgICAgIHZlcnRpY2FsTGluZXM6IHRydWUsCiAgICAgICAgdmVydGljYWxMaW5lc051bWJlcjogMTAsCiAgICAgICAgaG9yaXpvbnRhbExpbmVzOiB0cnVlLAogICAgICAgIGhvcml6b250YWxMaW5lc051bWJlcjogNQogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0RGF0ZTogZnVuY3Rpb24gZ2V0RGF0ZShkYXlzLCBtb250aHMsIHllYXJzLCBmb3JtYXQpIHsKICAgICAgcmV0dXJuIG1vbWVudCgpLnN1YnRyYWN0KGRheXMsICJkYXlzIikuc3VidHJhY3QobW9udGhzLCAibW9udGhzIikuc3VidHJhY3QoeWVhcnMsICJ5ZWFycyIpLmZvcm1hdChmb3JtYXQpOwogICAgfSwKICAgIGdldExhc3RXZWVrc0RhdGE6IGZ1bmN0aW9uIGdldExhc3RXZWVrc0RhdGEoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgY29weVdlZWtEYXRhc2V0ID0gW107CiAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbExpbmVzTnVtYmVyID0gODsKICAgICAgdGhpcy5sYWJlbHMueExhYmVscyA9IFt0aGlzLmdldERhdGUoNywgMCwgMCwgIkREL01NIiksIHRoaXMuZ2V0RGF0ZSg2LCAwLCAwLCAiREQvTU0iKSwgdGhpcy5nZXREYXRlKDUsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoNCwgMCwgMCwgIkREL01NIiksIHRoaXMuZ2V0RGF0ZSgzLCAwLCAwLCAiREQvTU0iKSwgdGhpcy5nZXREYXRlKDIsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoMSwgMCwgMCwgIkREL01NIiksIHRoaXMuZ2V0RGF0ZSgwLCAwLCAwLCAiREQvTU0iKV07CiAgICAgIGF4aW9zLmdldCgiaHR0cHM6Ly9hcGkuY29pbmRlc2suY29tL3YxL2JwaS9oaXN0b3JpY2FsL2Nsb3NlLmpzb24/c3RhcnQ9IiArIHRoaXMuZ2V0RGF0ZSg3LCAwLCAwLCAiWVlZWS1NTS1ERCIpICsgIiZlbmQ9IiArIHRoaXMuZ2V0RGF0ZSgwLCAwLCAwLCAiWVlZWS1NTS1ERCIpKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhLmJwaTsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICAgIGNvcHlXZWVrRGF0YXNldC5wdXNoKGRhdGFba2V5XSk7CiAgICAgICAgICBfdGhpcy5kYXRhc2V0ID0gY29weVdlZWtEYXRhc2V0OwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZ2V0TGFzdE1vbnRoc0RhdGE6IGZ1bmN0aW9uIGdldExhc3RNb250aHNEYXRhKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBjb3B5TW9udGhEYXRhc2V0ID0gW107CiAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbExpbmVzTnVtYmVyID0gNzsKICAgICAgdGhpcy5sYWJlbHMueExhYmVscyA9IFt0aGlzLmdldERhdGUoMzAsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoMjUsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoMjAsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoMTUsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoMTAsIDAsIDAsICJERC9NTSIpLCB0aGlzLmdldERhdGUoNSwgMCwgMCwgIkREL01NIiksIHRoaXMuZ2V0RGF0ZSgwLCAwLCAwLCAiREQvTU0iKV07CiAgICAgIGF4aW9zLmdldCgiaHR0cHM6Ly9hcGkuY29pbmRlc2suY29tL3YxL2JwaS9oaXN0b3JpY2FsL2Nsb3NlLmpzb24iKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhLmJwaTsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICAgIGNvcHlNb250aERhdGFzZXQucHVzaChkYXRhW2tleV0pOwogICAgICAgICAgX3RoaXMyLmRhdGFzZXQgPSBjb3B5TW9udGhEYXRhc2V0OwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZ2V0TGFzdFllYXJzRGF0YTogZnVuY3Rpb24gZ2V0TGFzdFllYXJzRGF0YSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgY29weVllYXJEYXRhc2V0ID0gW107CiAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbExpbmVzTnVtYmVyID0gMTM7CiAgICAgIHRoaXMubGFiZWxzLnhMYWJlbHMgPSBbdGhpcy5nZXREYXRlKDAsIDAsIDEsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCAxMSwgMCwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDEwLCAwLCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgOSwgMCwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDgsIDAsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCA3LCAwLCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgNiwgMCwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDUsIDAsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCA0LCAwLCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgMywgMCwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDIsIDAsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCAxLCAwLCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgMCwgMCwgIk1NL1lZWVkiKV07CiAgICAgIGF4aW9zLmdldCgiaHR0cHM6Ly9hcGkuY29pbmRlc2suY29tL3YxL2JwaS9oaXN0b3JpY2FsL2Nsb3NlLmpzb24/c3RhcnQ9IiArIHRoaXMuZ2V0RGF0ZSgwLCAwLCAxLCAiWVlZWS1NTS1ERCIpICsgIiZlbmQ9IiArIHRoaXMuZ2V0RGF0ZSgwLCAwLCAwLCAiWVlZWS1NTS1ERCIpKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhLmJwaTsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICAgIGNvcHlZZWFyRGF0YXNldC5wdXNoKGRhdGFba2V5XSk7CiAgICAgICAgICBfdGhpczMuZGF0YXNldCA9IGNvcHlZZWFyRGF0YXNldDsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdldExhc3RUZW5ZZWFyc0RhdGE6IGZ1bmN0aW9uIGdldExhc3RUZW5ZZWFyc0RhdGEoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy5ncmlkLnZlcnRpY2FsTGluZXNOdW1iZXIgPSAxMTsKICAgICAgdGhpcy5sYWJlbHMueExhYmVscyA9IFt0aGlzLmdldERhdGUoMCwgMCwgMTAsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCAwLCA5LCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgMCwgOCwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDAsIDcsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCAwLCA2LCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgMCwgNSwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDAsIDQsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCAwLCAzLCAiTU0vWVlZWSIpLCB0aGlzLmdldERhdGUoMCwgMCwgMiwgIk1NL1lZWVkiKSwgdGhpcy5nZXREYXRlKDAsIDAsIDEsICJNTS9ZWVlZIiksIHRoaXMuZ2V0RGF0ZSgwLCAwLCAwLCAiTU0vWVlZWSIpXTsKICAgICAgYXhpb3MuZ2V0KCJodHRwczovL2FwaS5jb2luZGVzay5jb20vdjEvYnBpL2hpc3RvcmljYWwvY2xvc2UuanNvbj9zdGFydD0iICsgdGhpcy5nZXREYXRlKDAsIDAsIDEwLCAiWVlZWS1NTS1ERCIpICsgIiZlbmQ9IiArIHRoaXMuZ2V0RGF0ZSgwLCAwLCAwLCAiWVlZWS1NTS1ERCIpKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhLmJwaTsKCiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICAgIHZhciBjb3B5VGVuWWVhckRhdGFzZXQgPSBbXTsKICAgICAgICAgIGNvcHlUZW5ZZWFyRGF0YXNldC5wdXNoKGRhdGFba2V5XSk7CiAgICAgICAgICBfdGhpczQuZGF0YXNldCA9IGNvcHlUZW5ZZWFyRGF0YXNldDsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuZ2V0TGFzdFRlblllYXJzRGF0YSgpOwogIH0KfTs="},{"version":3,"sources":["BitcoinHistory.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div id=\"history\">\r\n        <div id=\"historyGraphs\">\r\n            <trend-chart  v-if=\"dataset.length\" :datasets=\"[{data: dataset, fill: true, className: 'curve-btc'}]\" :labels=\"labels\" :min=\"0\" :grid=\"grid\" :interactive=\"true\"/>\r\n        </div>\r\n        <div class = \"historyButtons\">\r\n            <button v-on:click=\"getLastWeeksData()\">1 week</button>\r\n            <button v-on:click=\"getLastMonthsData()\">1 month</button>\r\n            <button v-on:click=\"getLastYearsData()\">1 year</button>\r\n            <button v-on:click=\"getLastTenYearsData()\">10 years</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from \"axios\";\r\n    import Vue from \"vue\";\r\n    import TrendChart from \"vue-trend-chart\";\r\n    Vue.use(TrendChart);\r\n    import moment from \"moment\";\r\n    export default{\r\n        el: \"#app\",\r\n        data ()  {\r\n            return {\r\n                isShown: 4,\r\n                dataset: [],\r\n                labels: {\r\n                    xLabels: [],\r\n                    yLabels: 5,\r\n                    yLabelsTextFormatter: val => \"$\" + Math.round(val * 100) / 100\r\n                },\r\n                grid: {\r\n                    verticalLines: true,\r\n                    verticalLinesNumber: 10,\r\n                    horizontalLines: true,\r\n                    horizontalLinesNumber: 5\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            getDate(days, months, years, format){\r\n                return moment()\r\n                    .subtract(days, \"days\")\r\n                    .subtract(months, \"months\")\r\n                    .subtract(years, \"years\")\r\n                    .format(format)\r\n            },\r\n            getLastWeeksData(){\r\n                var copyWeekDataset = [];\r\n                this.grid.verticalLinesNumber = 8;\r\n                this.labels.xLabels = [this.getDate(7, 0, 0, \"DD/MM\"), this.getDate(6, 0, 0, \"DD/MM\"), this.getDate(5, 0, 0, \"DD/MM\"),\r\n                                       this.getDate(4, 0, 0, \"DD/MM\"), this.getDate(3, 0, 0, \"DD/MM\"), this.getDate(2, 0, 0, \"DD/MM\"),\r\n                                       this.getDate(1, 0, 0, \"DD/MM\"), this.getDate(0, 0, 0, \"DD/MM\")];\r\n\r\n                axios\r\n                    .get(\"https://api.coindesk.com/v1/bpi/historical/close.json?start=\" + this.getDate(7, 0, 0, \"YYYY-MM-DD\") + \"&end=\" + this.getDate(0, 0, 0, \"YYYY-MM-DD\"))\r\n                    .then(res => {\r\n                        const data = res.data.bpi;\r\n                        for (let key in data) {\r\n                            copyWeekDataset.push(data[key]);\r\n                            this.dataset = copyWeekDataset;\r\n                        }\r\n                    });\r\n            },\r\n            getLastMonthsData(){\r\n                var copyMonthDataset = [];\r\n                this.grid.verticalLinesNumber = 7;\r\n                this.labels.xLabels = [this.getDate(30, 0, 0, \"DD/MM\"), this.getDate(25, 0, 0, \"DD/MM\"), this.getDate(20, 0, 0, \"DD/MM\"),\r\n                                       this.getDate(15, 0, 0, \"DD/MM\"), this.getDate(10, 0, 0, \"DD/MM\"), this.getDate(5,  0, 0, \"DD/MM\"),\r\n                                       this.getDate(0,  0, 0, \"DD/MM\")];\r\n\r\n                axios\r\n                    .get(\"https://api.coindesk.com/v1/bpi/historical/close.json\")\r\n                    .then(res => {\r\n                        const data = res.data.bpi;\r\n                        for (let key in data) {\r\n                            copyMonthDataset.push(data[key]);\r\n                            this.dataset = copyMonthDataset;\r\n                        }\r\n                    });\r\n            },\r\n            getLastYearsData(){\r\n                var copyYearDataset = [];\r\n                this.grid.verticalLinesNumber = 13;\r\n                this.labels.xLabels = [this.getDate(0, 0, 1, \"MM/YYYY\"), this.getDate(0, 11, 0, \"MM/YYYY\"), this.getDate(0, 10, 0, \"MM/YYYY\"), \r\n                                       this.getDate(0, 9, 0, \"MM/YYYY\"), this.getDate(0, 8,  0, \"MM/YYYY\"), this.getDate(0, 7,  0, \"MM/YYYY\"),\r\n                                       this.getDate(0, 6, 0, \"MM/YYYY\"), this.getDate(0, 5,  0, \"MM/YYYY\"), this.getDate(0, 4,  0, \"MM/YYYY\"),\r\n                                       this.getDate(0, 3, 0, \"MM/YYYY\"), this.getDate(0, 2,  0, \"MM/YYYY\"), this.getDate(0, 1,  0, \"MM/YYYY\"), \r\n                                       this.getDate(0, 0, 0, \"MM/YYYY\")];\r\n\r\n                axios\r\n                    .get(\"https://api.coindesk.com/v1/bpi/historical/close.json?start=\" + this.getDate(0, 0, 1, \"YYYY-MM-DD\") + \"&end=\" + this.getDate(0, 0, 0, \"YYYY-MM-DD\"))\r\n                    .then(res => {\r\n                        const data = res.data.bpi;\r\n                        for (let key in data) {\r\n                            copyYearDataset.push(data[key]);\r\n                            this.dataset = copyYearDataset;\r\n                        }\r\n                    });\r\n            },\r\n            getLastTenYearsData(){\r\n                this.grid.verticalLinesNumber = 11;\r\n                this.labels.xLabels = [this.getDate(0, 0, 10, \"MM/YYYY\"),this.getDate(0, 0, 9, \"MM/YYYY\"),this.getDate(0, 0, 8, \"MM/YYYY\"),this.getDate(0, 0, 7, \"MM/YYYY\"),\r\n                                       this.getDate(0, 0,  6, \"MM/YYYY\"),this.getDate(0, 0, 5, \"MM/YYYY\"),this.getDate(0, 0, 4, \"MM/YYYY\"),this.getDate(0, 0, 3, \"MM/YYYY\"),\r\n                                       this.getDate(0, 0,  2, \"MM/YYYY\"),this.getDate(0, 0, 1, \"MM/YYYY\"),this.getDate(0, 0, 0, \"MM/YYYY\")];\r\n                \r\n                axios\r\n                    .get(\"https://api.coindesk.com/v1/bpi/historical/close.json?start=\" + this.getDate(0, 0, 10, \"YYYY-MM-DD\") + \"&end=\" + this.getDate(0, 0, 0, \"YYYY-MM-DD\"))\r\n                    .then(res => {\r\n                        const data = res.data.bpi;\r\n                        for (let key in data) {\r\n                            var copyTenYearDataset = [];\r\n                            copyTenYearDataset.push(data[key]);\r\n                            this.dataset = copyTenYearDataset;\r\n                        }\r\n                    });\r\n            }\r\n        },\r\n        mounted() {\r\n            this.getLastTenYearsData();\r\n        }\r\n    }\r\n</script>"],"sourceRoot":"src/components"}]}